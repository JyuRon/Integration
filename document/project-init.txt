* 개발 방향성
    - JUnit5, Test-Container 를 사용하여 의존성을 제거하여 순수 자바 코드에 대하여 테스트
    - 에러코드를 체계화 하여 에러 발생시 바로바로 대응할 수 있도록 설계해 보자(Exception Handler)
    - 응답데이터를 공통된 포맷에 맞춰 반환할 수 있도록 설계
    - Web MVC 와 Batch 가 공존할 것으로 보인다. multi-module 구성을 통해 프로젝트를 구성
    - AWS Code Deploy, GitHub Action 을 활용하여 CD-CI 를 구성
    - 배포 코드의 경우 도커 이미지를 생성하여 배포할 것인지 고려 필요(JLB, DockerFile 선택)
    - Logback 을 사용하여 로그 수집을 어떠한 방향성으로 할 것인지 개발을 하면서 자주 변경 될 것 같다.
    - CD-CI 를 사용하기 떄문에 git flow 전략을 잘 세우자 (dev/, feature/ , release/, hotfix/)
    - Feign Client, RestTemplate 두개 모두 사용하여 학습한다.
    - React 학습을 진행할 수도 있기 때문에 바로 적용 가능하도록 설계를 해보자
    - Java 17 사용, record 와 친숙해지자
    - use-case, api 명세서를 최대한 만들어보자
    - DevTools, configuration processor 를 사용하여 application.yml 을 적용해보자
    - git hub release 활용해보자
    - profile 분리

* 기존 학습 코드를 가져와야 할 항목
1. 게시판
    - 페이지네이션, 댓글, 대댓글, 해시태그(본문 내에서 해당 내용을 추출)
    - 기존 코드를 재활용하여 게시판 생성 기능을 만들고 싶다.
    - 또한 정산 게시판에서 아이템 입력시 자동완성 기능을 구현
    - 이미지(파일) 업로드 및 다운로드 구현 & 썸네일 이미지 제작까지 필요하면 구현
    - 정산 내역을 excel, csv 로 다운로드 지원 예정
    - 금액 관련 필드에는 BigDecimal 자료형 사용
    - 게시글 조회수, 게시판 리스트 조회 시 게시글 마다 댓글 수 표시
2. 로그인
    - 개인정보 관리가 까다롭기 때문에 kakao login 을 우선적으로 적용하고자 한다.
    - 기존 로그인 코드에서 jwt 와 redis 를 활용하여 성능개선을 생각
    - 학습용으로 기존 회원가입한 유저를 대상으로 sns 연동 기능 추가 개발 예정
    - 해당 작업이 마무리 되면 학습용으로 기타 oauth2 로그인 2개를 추가적으로 적용예정
3. 길찾기 서비스
    - 프로젝트와 관련성이 적어보이나 학습기록용으로 적용하고 싶다.
    - 이전 약국데이터의 경우 가공된 데이터를 가지고 테스트를 진행하였지만 하루에 한번 데이터를 갱신하도록 개발(batch)
    - docker:redis 를 사용할 예정(test : test-container)
4. DB
    - 운영을 생각하고 있기 때문에 docker가 아닌 local db 를 염두에 두고 개발 예정
    - local db 와 docker data 공유가 가능하다면 이 또한 고려
    - Postgres, JPA, Auditing, Converter, QueryDSL, DataRepository, HAL Explore, mockaroo.com(더미 데이터)
5. UI
    - Server Side Engine : Thymeleaf Decoupled Logic 을 사용하여 구현 예정
    - https://getbootstrap.com/
    - https://bootdey.com/


* 추가 기능 개발
1. 파티 등록 게시판
    - 자신이 활동하고 있는 파티의 관리자인 경우 자신의 파티원을 등록한다.
    - 이때 보상을 순번대로 먹고 있었다면 이를 추가해주는 기능을 체크 여부를 통해 등록하는 기능을 추가한다.
    - 순번이 꼬이는 경우 이를 변경 할 수 있는 기능 또한 제공한다.
    - 매주 목요일마다 보상 먹는 사람의 순번을 갱신한다.
    - 파티원 닉네임 입력시 이미 가입한 회원인 경우 자동완성(닉네임/서버/길드)을 지원하며 그렇지 않은 경우 손수 타이핑 하여 입력하도록 한다.

2. 정산 게시판
    - 게시판의 포맷은 기존 사용하던 excel 양식을 기반으로 제작한다.
    - 회원가입을 하지 않고 정산 내역 열람을 원하는 경우 파티장이 입력한 비밀번호를 입력해야 열람이 가능하도록 설정한다.
    - 회원의 경우 자신이 속한 파티에 대한 내역만 열람이 가능하도록 설정

3. 알림 기능
    - 회원을 대상으로 서비스를 진행
    - 파티장에게는 금액 미등록 또는 판매 처리 상태 변경을 요청하는 알림 메시지를 전송한다.
    - 파티원에게는 수령하지 않은 정산금을 안내하는 카카오톡 알림 메시지를 전송한다.
    - 해당 메시지 내용을 알림 탭에서도 확인 가능하도록 설계한다.(SSE)

4. 메뉴 관리
    - 사이트 운영자만 접근 할 수 있도록 구성한다.
    - 게시판 추가 기능 구현시 필요 할 것 같은 기능이다.
    - 게시판 추가시 html 코드를 직접 변경하여 구성하는 것은 비효율이라 생각

4. 회원 권한
    - 운영자, 파티장, 파티원(회원), 파티원(비회원) 등으로 권한을 분류하여 각 게시판 마다의 권한을 부여한다.

5. 회원 가입
    - 회원 가입시 닉네임, 서버, 길드 등의 정보를 입력하는 공간을 별도로 추가해야 할 것 같다.
    - 이때 이 사람이 진짜 캐릭터 주인인지 판단을 할 것인가는 고민을 해봐야 할 것 같다.


* 고려 서비스
    - 방문자 집계 카운트
    - kafka, Async, Web Socket 또한 적용 할 수 있는 항목이 존재한다면 적용해보자.

