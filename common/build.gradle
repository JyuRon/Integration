plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.12'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'java-library'
}

group = 'com.jyuka'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Dev Tool
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Entity
    api 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.data:spring-data-rest-hal-explorer'
    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'com.h2database:h2'

    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'


    // queryDSL 설정
    api "com.querydsl:querydsl-jpa"
    api "com.querydsl:querydsl-core"
    api "com.querydsl:querydsl-collections"
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa" // querydsl JPAAnnotationProcessor 사용 지정
    annotationProcessor "jakarta.annotation:jakarta.annotation-api" // java.lang.NoClassDefFoundError (javax.annotation.Generated) 대응 코드
    annotationProcessor "jakarta.persistence:jakarta.persistence-api" // java.lang.NoClassDefFoundError (javax.annotation.Entity) 대응 코드


}

tasks.named('test') {
    useJUnitPlatform()
}


// 인텔리제이, gradle 빌드 차이로 인해 발생하는 문제 해결을 위한 설정
// Querydsl 설정부
def generated = 'src/main/generated'

// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
    main.java.srcDirs += [ generated ]
}



tasks.register("prepareKotlinBuildScriptModel") {}

// application 을 실행하기 위한 리소스등(라이브러리)이 포함된다.
// 즉 실행이 가능한 파일다른 모듈에서 참조가 목적인 모듈이기 때문에 필요하지 않다.
// true 시 main 클래스가 없어 에러 발생
// xxx.jar
tasks.bootJar {enabled=false}

// xxx-plain.jar
// 라이브러리(의존성)이 없는 내가 직접 작성한 코드만 반영됨
tasks.jar {enabled=true}